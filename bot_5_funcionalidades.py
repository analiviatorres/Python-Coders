from flask import Flask, request, jsonify
import requests
import socket

# Usando o flask para criar o servidor local do bot.
app = Flask(__name__) # a vari√°vel "app" √© o padr√£o usado nesse tipo de c√≥digo.

token = "" #token do bot do telegram.
api_url = f"https://api.telegram.org/bot{token}" #endere√ßo da API do telegram.
url_webhook = "" #endere√ßo que o aplicativo do ngrok disponibiliza ap√≥s ser executado no computador(obs: esse endere√ßo muda todas as vezes que programa √© executado).

# Configura√ß√£o do webhook que √© executada ap√≥s o inicio do aplicativo do flask, "app".
def telegram_webhook(): #fun√ß√£o que vai executar o webhook
    url = f"{api_url}/setWebhook?url={url_webhook}/webhook" # url que interliga a API do telegram e o programa "Ngrok" e faz a rota de comunia√ß√£o.
    response = requests.get(url) #fazendo solicita√ß√£o "GET".
    return response.json() #retornando os dados em JSON e transformando-os em um objeto python.

# Lista que vai armazenar o nome recebido pelos usu√°rios.
users_registered = []

# L√≥gica para processar mensagens recebidas
def process_message(dados):
    name_id = dados["message"]["from"]["first_name"] #A fun√ß√£o "process_message" recebe um argumento chamado "dados", que √© onde est√° localizado as informa√ß√µes recebidas pelo bot.
    chat_id = dados['message']['chat']['id'] #Aqui est√° sendo extraido o "id" do chat da mensagem recebida.
    text_received = dados['message']['text'] #aqui est√° sendo extraido a mensagem do usu√°rio.

    #Aqui ser√° criado um fluxo de intera√ß√£o pr√©-determinado entre o bot e o usu√°rio.
    if text_received == "/start": # A palavra "/start" ser√° o gatilho da intera√ß√£o.
        welcome_message = ("Bem-vindo ao bot Scooby-doo! ü§ñ\n"
                           "Digite '/info' para saber mais informa√ß√µes sobre mim! \n"
                           "Digite '/name' para saber qual √© seu nome de usu√°rio do Telegram! \n"
                           "Digite '/ip' para eu te mostrar o meu endere√ßo IP! \n"
                           "Digite '/image' para eu te enviar uma foto minha :) \n"
                           "Digite '/sair' para encerrar o chat! \n")
        send_message(chat_id, welcome_message) #chamando a fun√ß√£o "send_message" para enviar a mensagem de forma mais autom√°tica ao "chat_id".
    #Abaixo uma serie de condi√ß√µes para cada solicita√ß√£o do usu√°rio.
        #Enviando as informa√ß√µes sobre o BOT.
    elif text_received.lower() == "/info":
        response_message = "Ol√°, eu sou o BOT Scooby-doo! Possuo algumas habilidade legais, posso te mostrar meu endere√ßo IP, descobrir seu nome de usu√°rio e mais!  "
        send_message(chat_id, response_message)

        #Enviando o nome do usu√°rio conforme configurado no telegram e o adicionando a uma lista.
    elif text_received.lower() == "/name":
        response_message = f"Seu nome de usu√°rio √©: {name_id}! e ele foi adicionado ao nosso banco de dados."
        send_message(chat_id, response_message)
        users_registered.append(name_id)

        #Enviando o endere√ßo IP do BOT.
    elif text_received.lower() == "/ip":
        response_message = f"Meu endere√ßo IP √©: {get_ip()}"
        send_message(chat_id, response_message)

        #Enviando uma foto do BOT para o usu√°rio.
    elif text_received.lower() == '/image':
        photo_path = get_image()
        response_message = "Aqui est√° a foto:"
        send_message(chat_id, response_message)
        send_photo(chat_id, photo_path)

        #Finalizando a intera√ß√£o.
    elif text_received.lower() == "/sair": 
        response_message = "Voc√™ escolheu SAIR. At√© a pr√≥xima! ü§ñ" 
        send_message(chat_id, response_message)

        #lidando com outras mensagens do usu√°rio.
    else:
        response_message = "Comando n√£o reconhecido. Digite '/info' para saber mais sobre mim ou '/sair' para encerrar o chat."
        send_message(chat_id, response_message)

# Fun√ß√£o que processa a l√≥gica para envio da mensagem.
def send_message(chat_id, text): # a fun√ß√£o possui dois par√¢metros, "chat_id" que √© o identificador do usu√°rio e "text" que ser√° e mensagem enviada.
    url = f"{api_url}/sendMessage" #usando f-string para construir o endere√ßo da url juntamente com o endpoint, que √© o "sendMessage".
    send_dados = {"chat_id": chat_id, "text": text} # "send_dados" √© um dicion√°rio que ser√° enviado no corpo da solicita√ß√£o.
    response = requests.post(url, json=send_dados) #criando a solicita√ß√£o POST.
    return response.json()

# Fun√ß√£o que envia uma foto para o usu√°rio usando a API do Telegram.
def send_photo(chat_id, photo_path): #chat_id e photo_path, s√£o par√¢metros que representam o identificador do chat para o qual a foto ser√° enviada e o caminho do arquivo da foto, respectivamente.
    url = f"{api_url}/sendPhoto" #endere√ßo da API do Telegram usando o comando sendPhoto para enviar a imagem.
    files = {'photo': open(photo_path, 'rb')} #abrindo a imagem.
    params = {'chat_id': chat_id} #par√¢mtros da requisi√ß√£o.

    response = requests.post(url, params=params, files=files) #enviando a requisi√ß√£o.
     #verificando o status da requisi√ß√£o.
    if response.status_code == 200:
        return 'ok'

# Fun√ß√£o que cria um socket e coleta o IP do host.
def get_ip():
    try:
        conect_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) #criando um socket do tipo UDP.
        conect_socket.connect(("8.8.8.8", 80)) #Conectando o socket a um endere√ßo IP externo, Isso √© feito para garantir que o socket esteja associado a uma interface de rede.
        address_ip = conect_socket.getsockname()[0] #usando o m√©todo "getsockname" para pegar o IP associado ao host, ele usa uma tupla que extrai esse dado.
        return address_ip
        #Realizando tratamento de erros.
    except OSError as e:
        return f"Erro ao obter endere√ßo IP: {e}"
    finally: #finalizando a conex√£o do socket.
        conect_socket.close()
# Fun√ß√£o que vai retorna o caminho do arquivo, a foto do BOT.
def get_image():
    try:
        photo_path = "C:\\Users\\livia\\Desktop\\server\\image_scooby.jpg"
        return photo_path
    except OSError as e:
        return f"Erro: {e}"

# Rota do webhook
@app.route('/webhook', methods=['POST']) #aqui √© usado um tipo de decorator que mapeia a fun√ß√£o "webhook" criada logo a baixo.
#esse decorator √© o que vai permitir a comunica√ß√£o de forma "sincrona", pois √© o que o telegram usar√° para enviar as atualiza√ß√µes.
def webhook(): #essa fun√ß√£o, "webhook" ser√° usada para quando for usado a solicita√ß√µes POST.
    dados = request.get_json() #os dados extraidos da solicita√ß√£o JSON, ser√£o adicionados a vari√°vel "dados"
    process_message(dados) #Aqui √© chamado a fun√ß√£o "process_message"para as informa√ß√µes do "dados" serem processadas.
    return jsonify()

if __name__ == '__main__': #essa condi√ß√£o verifica se o script est√° sendo executado.
    telegram_webhook() #chamando a fun√ß√£o que est√° configurada no webhook a cima.
    app.run(port=5000) # Inicia o servidor na porta 5000.
