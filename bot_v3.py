from flask import Flask, request, jsonify
import requests
import socket

#usando o flask para criar o webhook do bot do telegram.
app = Flask(__name__) # a vari√°vel "app" √© o padr√£o usado nesse tipo de c√≥digo.

token = "6461998796:AAFLpQNPx4rFTmOFs-PdJk2O_GqkQzxnWAY" #token do bot do telegram.
api_url = f"https://api.telegram.org/bot{token}" #endere√ßoi da API do telegram.
url_webhook = "https://999f-187-19-156-117.ngrok-free.app" #endere√ßo que o aplicativo do ngrok disponibiliza ap√≥s ser executado no computador(obs: esse endere√ßo muda todas as vezes que programa √© executado.).


# Configura√ß√£o do webhook que √© executada ap√≥s o inicio do aplicativo do flask, "app".
def telegram_webhook(): #fun√ß√£o que vai executar o webhook
    url = f"{api_url}/setWebhook?url={url_webhook}/webhook" # url que interliga a API do telegram e o programa "Ngrok" e faz a rota de comunia√ß√£o.
    response = requests.get(url) #fazendo solicita√ß√£o "GET".
    return response.json() #retornando os dados em JSON e transformando-os em um objeto python.

users_registered = []

# L√≥gica para processar mensagens recebidas
def register_user(dados): #A fun√ß√£o "register_user" recebe um argumento chamado "dados", que √© onde est√° localizado as informa√ß√µes recebidas pelo bot.
    chat_id = dados['message']['chat']['id'] #Aqui est√° sendo extraido o "id" do chat da mensagem recebida.
    text_received = dados['message']['text'] #aqui est√° sendo extraido a mensagem do usu√°rio.
    print(text_received)
    if text_received.startswith("/name "):
        # Verifica se h√° pelo menos dois elementos ap√≥s a divis√£o
        name_parts = text_received.split("/name ")
        if len(name_parts) > 1:
            user_name = name_parts[1]
            users_registered.append({chat_id: user_name})
            response_message = f"Ol√°, {user_name}! Voc√™ foi Registrado com Sucesso!"
            send_message(chat_id, response_message)
        else:
            response_message = "Por favor, use o comando '/name' seguido do seu nome para se registrar."
            send_message(chat_id, response_message)
    
    elif text_received == "/start": 
        users_registered = any(chat_id in user.keys() for user in users_registered)
        if users_registered:
            welcome_message = ("Bem-vindo ao bot Scooby-doo! ü§ñ\n"
                           "Digite '/info' para saber mais informa√ß√µes sobre mim! \n"
                           "Digite '/ip' para saber seu IP! \n"
                           "Digite '/sair' para encerrar o chat! \n")
            send_message(chat_id, welcome_message) #chamando a fun√ß√£o "send_message" para enviar a mensagem de forma mais autom√°tica ao "chat_id".
        else:
            response_message = "Por favor, use o comando '/name' seguido do seu nome para se registrar. "
            send_message(chat_id, response_message)
    elif text_received.lower() == "/info": #caso a condi√ß√£o anterior n√£o seja atendida, ser√° verificado se a resposta √© "um".
        response_message = "Ol√°, me chamo Scooby-doo,sou um BOT que investigativo e possuo algumas habilidades! Como descobrir qual √© o seu indere√ßo IP, servi√ßo de DNS e mais! "
        send_message(chat_id, response_message)
    elif text_received.lower() == "/ip":
        ip_address = obter_ip()
        response_message = f"Seu endere√ßo IP √©: {ip_address}"
        send_message(chat_id, response_message)
    elif text_received.lower() == "/sair": #caso a condi√ß√£o anterior n√£o seja atendida, ser√° verificado se a resposta √© "dois".
        response_message = "Voc√™ escolheu SAIR. At√© a pr√≥xima! ü§ñ" 
        send_message(chat_id, response_message)
    else:
        #lidando com outras mensagens do usu√°rio.
        response_message = "Comando n√£o reconhecido. Digite '/info' para saber mais sobre mim ou '/sair' para encerrar o chat."
        send_message(chat_id, response_message)

# Fun√ß√£o que processa a l√≥gica para envio da mensagem.
def send_message(chat_id, text): # a fun√ß√£o possui dois par√¢metros, "chat_id" que √© o identificador do usu√°rio e "text" que ser√° e mensagem enviada.
    url = f"{api_url}/sendMessage" #usando f-string para construir o endere√ßo da url juntamente com o endpoint, que √© o "sendMessage".
    send_dados = {"chat_id": chat_id, "text": text} # "send_dados" √© um dicion√°rio que ser√° enviado no corpo da solicita√ß√£o.
    response = requests.post(url, json=send_dados) #criando a solicita√ß√£o POST.
    return response.json()

def obter_ip():
    try:
        host_name = socket.gethostname()
        ip_address = socket.gethostbyname(host_name)
        return ip_address
    except Exception as e:
        return f"Erro ao tentar obter endere√ßo IP: {e}"
    

# Rota do webhook
@app.route('/webhook', methods=['POST']) #aqui √© usado um tipo de decorator que mapeia a fun√ß√£o "webhook" criada logo a baixo.
#esse decorator √© o que vai permitir a comunica√ß√£o de forma "sincrona", pois √© o que o telegram usar√° para enviar as atualiza√ß√µes.
def webhook(): #essa fun√ß√£o, "webhook" ser√° usada para quando for usado a solicita√ß√µes POST.
    dados = request.get_json() #os dados extraidos da solicita√ß√£o JSON, ser√£o adicionados a vari√°vel "dados"
    register_user(dados) #Aqui √© chamado a fun√ß√£o "process_message"para as informa√ß√µes do "dados" serem processadas.
    return jsonify()

if __name__ == '__main__': #essa condi√ß√£o verifica se o script est√° sendo executado.
    telegram_webhook() #chamando a fun√ß√£o que est√° configurada no webhook a cima.
    app.run(port=5000) # Inicia o servidor na porta 5000
